; ----------------------------------------------------------------------------
; SYNTH YM SOUND PROTOTYPE
;
; For an azerty keyboard (PC) :
;
; - 13 keys TAB then octave A to $ (line 0 & 1) => play note
; - F1 to F10 									=> change octave transpose
; - LEFT / RIGHT 								=> +/- semi tone transpose
; - 4 / 6 (numpad)								=> fine tune 
; - + / - (numpad)								=> select sound
; - 7 / 9 (numpad)                              => inc / dec portamiento (operate when != 0, value is number of vbls to slide)
; - UP / DOWN									=> select channel
; - SPACE                   					=> activate / deactivate channel
; - BACKSPACE									=> PC only : toggle YM PC emulator curve sync
; - RETURN                                      => PC only : hot reloads the sound script
; - ²                                           => PC only : change sound emulator (default is the most accurate)
; ----------------------------------------------------------------------------

; ----------------------------------------------------------------------------
;  Curve type, can be :
;  - AMP  	   : 0->15 ch levelor 16 for enveloppe mode
;  - FREQ 	   : -64 -> 64 semi tones
;  - MIX  	   : 0 -> 3 (max level, square, noise, square + noise)
;  - ENVFREQ   : -64 -> 64 semi tones
;  - ENVSHAPE  : 0 -> 15. YM env shape. Repeating ones are (8 and 10 for sawtooth, 12 and 14 for triangle)
;  - NOISEFREQ : 0 -> 31
;
;  Then curve can be specified :
;
;  - as ascii art level :
;	 A attack S sustain R release
;    number of letter determine level (1 char for 1)
;    xx or |xx are positive values
;    xx| is negative value 
;
;  - as value :
;    a attack s sustain r release
;    xvalue
;    for examples : s10 or s-5
;
;  curve ends with character < 
;
;  AMP curve has a specificity : it determines the life cycle of the sound
;  so the AMP curve will go to release if exists (or stop) when the key is not pressed anymore
;  for other types of curves, if there is no release but a sustain phasis 
;  it will loops on the sustain till the sound reaches the end (based on AMP curve life cycle)
; ----------------------------------------------------------------------------

[SIMPLESQR]
    AMP
    1
    s10
	s8
	s6
	s4
	s2
	s0
    <

    FREQ
    1
    a0
    <

    MIX
    1
    a1
    <

    END
[PUMPSQR]
    AMP
    1
	a2
	a6
	a9
	a11
    s10
	<

    FREQ
    1
    a0
    <

    MIX
    1
    a1
    <

    END
[SQUARE]
    AMP
    4
    AAAAAAAAA
    SSSSSSSSSSSSSSS
    DDDDDDDDDDDDDDD
    DDDDDDDDDDDDDD
    DDDDDDDDDDDDD
    DDDDDDDDDDDD
    DDDDDDDDDDD
    DDDDDDDDDD
    DDDDDDDDD
    DDDDDDDD
    DDDDDDD
    DDDDDD
    DDDDD
    DDDD
    DDD
    DD
    D
    <

    FREQ
    1
    a0
    <

    FREQFINE
    2
    s0
    s-2
    s-4
    s-2
    s0
    s2
    s4
    s2
    <

    MIX
    1
    a1
    <

    END

[SQUARE2]
    SQRSYNC
    1
    a1
    s0
    s0
    s1
    <

    AMP
    4
    AAAAAAAAA
    SSSSSSSSSSSSSSS
    DDDDDDDDDDDDDDD
    DDDDDDDDDDDDDD
    DDDDDDDDDDDDD
    DDDDDDDDDDDD
    DDDDDDDDDDD
    DDDDDDDDDD
    DDDDDDDDD
    DDDDDDDD
    DDDDDDD
    DDDDDD
    DDDDD
    DDDD
    DDD
    DD
    D
    <

    FREQ
    1
    a0
    <

    FREQFINE
    2
    s0
    s-2
    s-4
    s-2
    s0
    s2
    s4
    s2
    <

    MIX
    1
    a1
    <

    END

[TF_ARP_1]
    AMP
; -- tick in nb of 50hz vbl (higher is slower)
    8
    SSSSSSSSSSSSSSS
    DDDDDDDDDDDDDDD
    DDDDDDDDDDDDDD
    DDDDDDDDDDDDD
    DDDDDDDDDDDD
    DDDDDDDDDDD
    DDDDDDDDDD
    DDDDDDDDD
    DDDDDDDD
    DDDDDDD
    DDDDDD
    DDDDD
    DDDD
    DDD
    DD
    D
    <


    FREQ
    2
    s12
    s5
    s17
    s8
    s20
    s0
    <

    MIX
    1
    a1
    <
	
; -- current sound should end sound with END tag
	END


[TF_ARP_2]
; ----------------------------------------------------------------------------
    AMP
    8
    SSSSSSSSSSSSSSS
    DDDDDDDDDDDDDDD
    DDDDDDDDDDDDDD
    DDDDDDDDDDDDD
    DDDDDDDDDDDD
    DDDDDDDDDDD
    DDDDDDDDDD
    DDDDDDDDD
    DDDDDDDD
    DDDDDDD
    DDDDDD
    DDDDD
    DDDD
    DDD
    DD
    D
    <


    FREQ
    2
    |
    |SSSSS
    |SSSS
    |SSSSSSSSS
    |SSSSSSS
    |SSSSSSSSSSSS
    <

    MIX
    1
    a1
    <
	
	END

[TF_ARP_3]
; ----------------------------------------------------------------------------
    AMP
    8
    SSSSSSSSSSSSSSS
    DDDDDDDDDDDDDDD
    DDDDDDDDDDDDDD
    DDDDDDDDDDDDD
    DDDDDDDDDDDD
    DDDDDDDDDDD
    DDDDDDDDDD
    DDDDDDDDD
    DDDDDDDD
    DDDDDDD
    DDDDDD
    DDDDD
    DDDD
    DDD
    DD
    D
    <
    
    
    FREQ
    2
    |
    |SSSSSSSSSSSS
    |SSS
    |SSSSSSSSSSSSSSS
    |SSSSSSS
    |SSSSSSSSSSSSSSSSSSS
    <
    
    MIX
    1
    a1
    <
    
    END

[TF_ARP_4]
; ----------------------------------------------------------------------------
    AMP
    8                
    SSSSSSSSSSSSSSS
    DDDDDDDDDDDDDDD
    DDDDDDDDDDDDDD
    DDDDDDDDDDDDD
    DDDDDDDDDDDD
    DDDDDDDDDDD
    DDDDDDDDDD
    DDDDDDDDD
    DDDDDDDD
    DDDDDDD
    DDDDDD
    DDDDD
    DDDD
    DDD
    DD
    D
    <


    FREQ
    2
    |
    |SSSSSSS
    |SSSS
    |SSSSSSSSSSS
    |SSSSSSS
    |SSSSSSSSSSSSSS
    <

    MIX
    1
    a1
    <
	
	END

[NOISE_TEST]
; ----------------------------------------------------------------------------
    AMP
    2
    AAAA
    AAAAAAAA
    AAAAAAAAAAAAAAA
    SSSSSSSSSSSSSSS
    SSSSSSSSSSSSS
    DDDDDDDDDDDDDDD
    DDDDDDDDDDDDDD
    DDDDDDDDDDDDD
    DDDDDDDDDDDD
    |
    |
    |
    DDDDDDDDDDDD
    DDDDDDDDDDD
    DDDDDDDDDD
    |
    |
    |
    DDDDDDDDD
    DDDDDDDD
    DDDDDDD
    |
    |
    |
    DDDDDD
    DDDDD
    DDDD
    |
    |
    |
    DDD
    DD
    D
    <


    FREQ
    1
    s0
    <

    MIX
    1
    A
    S
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    DD
    D
    <
	
	END

[BUZZER_EF_VAR]
; ----------------------------------------------------------------------------
    AMP
    1
    a16
    s16
    <

    FREQ
    1
    s24
    <

    ENVFREQ
    1
    s0
    <

    ENVFREQFINE
    10
    s1
    s0
    s-1
    s0
    <

	SQRSYNC
	1
	a1
	a0
	<
	
    ENVSHAPE
    1
    s0
    <

    MIX
    1
    a1
    <

	END
	
[BUZZER_PURE_DOK]
; ----------------------------------------------------------------------------
AMP
1
a16
s16
<

ENVFREQ
1
a0
<   

ENVFREQFINE
1
s0
s-1
s0
s1
<

ENVSHAPE
1
s14
<

MIX
1
a0
<

END	
	
[BUZZER_SF_VAR]
; ----------------------------------------------------------------------------
    AMP
    1
    a16
    s16
    <

    SQRSYNC
    1
    a1
    s0
    s0
	s0
	s0
	s0
    s1
    <

    FREQ
    1
    s0
    <

    ENVFREQ
    1
    a0
    <

    ENVSHAPE
    1
    a12
    <

    MIX
    1
    a1
    <

	END

[BUZZER_PURE]
; ----------------------------------------------------------------------------
    AMP
    1
    a16
    s16
    <

    ENVFREQ
    1
    s0
    <	

    ENVFREQFINE
    1
    s0
    s-1
    s0
    s1
    <
    
    ENVSHAPE
    1
    a8
    <

    MIX
    1
    a0
    <

	END

[BUZZER_PURE_2]
; ----------------------------------------------------------------------------
    AMP
    1
    a16
    s16
    <

    MIX
    1
    a2
    <

    NOISEFREQ
    1
    s0
	<

	ENVFREQ
    1
    s0
    <	

    ENVFREQFINE
    1
    s0
    s-1
    s0
    s1
    <
    
    ENVSHAPE
    1
    a14
    <

	END

[BUZZER_PURE_3]
; ----------------------------------------------------------------------------
    AMP
    1
    a16
    s16
    <

    MIX
    1
    a0
    <

	END	

[BUZZER_PURE_4]
; ----------------------------------------------------------------------------
    AMP
    1
    a16
    s16
    <

    ENVFREQ
    10
    s0
	s12
    <	

    ENVFREQFINE
    1
    s0
    s-1
    s0
    s1
    <
    
    ENVSHAPE
    10
    s8
	s14
    <

    MIX
    1
    a0
    <

	END

[BUZZER_PURE_5]
; ----------------------------------------------------------------------------
    AMP
    1
    a16
    s16
    <

    ENVSHAPE
    10
    s8
	s12
    <

    ENVFREQ
    10
    s0
	s12
    <	

    ENVFREQFINE
    1
    s0
    s-1
    s0
    s1
    <
    
    MIX
    1
    a0
    <

	END

[NOISE_ENVELOP]
; ----------------------------------------------------------------------------
    AMP
    1
    a16
    s16
    <

    ENVFREQ
    1
    s0
    <

    ENVSHAPE
    1
    a10
    <

    NOISEFREQ
    1
    S
    SS
    SSS
    SSSS
    SSSSS
    SSSSSS
    SSSSSSS
    SSSSSSSS
    SSSSSSSSS
    SSSSSSSSSS
    SSSSSSSSSSS
    SSSSSSSSSSSS
    SSSSSSSSSSSSS
    SSSSSSSSSSSSSS
    SSSSSSSSSSSSSSS
    SSSSSSSSSSSSSSSS
    SSSSSSSSSSSSSSSSS
    SSSSSSSSSSSSSSSSSS
    SSSSSSSSSSSSSSSSSSS
    SSSSSSSSSSSSSSSSSSSS
    SSSSSSSSSSSSSSSSSSSSS
    SSSSSSSSSSSSSSSSSSSSSS
    SSSSSSSSSSSSSSSSSSSSSSS
    SSSSSSSSSSSSSSSSSSSSSSSS
    SSSSSSSSSSSSSSSSSSSSSSSSS
    SSSSSSSSSSSSSSSSSSSSSSSSSS
    SSSSSSSSSSSSSSSSSSSSSSSSSSS
    SSSSSSSSSSSSSSSSSSSSSSSSSSSS
    SSSSSSSSSSSSSSSSSSSSSSSSSSSSS
    SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
    SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
    <

    MIX
    1
    a2
    <

	END
	
[NOISE_PURE]
	MIX
    1
    a2
    <
	
    NOISEFREQ
    1
    s1
	<
    
	AMP
    1
    s15
    <
	
	END
	